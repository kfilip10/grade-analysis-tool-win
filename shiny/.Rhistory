points >= 0.88 ~ "A",
points >= 0.76 ~ "B",
points >= 0.64 ~ "C",
points >= 0.60 ~ "D",
TRUE ~ "F"
)
)
# Labs ----
df_lab <- read_excel("25-2 labs.xlsx")
#pivot long
df_lab_long <- df_lab %>%
pivot_longer(
cols      = c(1:2),            # gather all columns except SID
names_to  = "lab_bin", # new column that holds the old header
values_to = "points"         # new column that holds the cell values
)
#grade bin
df_lab_long <- df_lab_long %>%
mutate(
grade= case_when(
points >= 0.88 ~ "A",
points >= 0.76 ~ "B",
points >= 0.64 ~ "C",
points >= 0.60 ~ "D",
TRUE ~ "F"
)
)
lab_grade_tbl <- df_long %>%                 # one row per student
count(lab_bin, grade, name = "n")          # students in that cell
lab_grade_tbl <- df_lab_long %>%                 # one row per student
count(lab_bin, grade, name = "n")          # students in that cell
# 2. Percent of each grade *within* its lab_bin
lab_grade_pct <- lab_grade_tbl %>%
group_by(lab_bin) %>%
mutate(
pct   = n / sum(n),
label = percent(pct, accuracy = 1)       # whole-percent labels
) %>%
ungroup() %>%
mutate(grade = factor(grade, levels = c("A","B","C","D","F")))  # x-axis order
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = label),
position = position_dodge(width = 0.9),
vjust = -0.35, size = 4.5) +
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.05))   # a little head-room
) +
scale_fill_tableau() +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.9)) +
geom_text(aes(label = label),
position = position_dodge(width = 0.9),
vjust = -0.35, size = 4.5) +
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
scale_fill_tableau() +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7)) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
scale_fill_tableau() +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),with = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
scale_fill_tableau() +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
scale_fill_tableau() +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 2. Percent of each grade *within* its lab_bin
lab_grade_pct <- lab_grade_tbl %>%
mutate(
lab_bin = factor(lab_bin,           # keep “lab-ind” on the left
levels = c("Labs - Ind", "Labs - Grp")),
grade   = factor(grade, levels = c("A","B","C","D","F"))
) %>%
group_by(lab_bin) %>%
mutate(
pct   = n / sum(n),
label = percent(pct, accuracy = 1)       # whole-percent labels
) %>%
ungroup() %>%
mutate(grade = factor(grade, levels = c("A","B","C","D","F")))  # x-axis order
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
scale_fill_tableau() +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_fill_manual(values = c("Labs - Ind" = "#4CAF50",   # green
"Labs - Grp"   = "#A9A9A9"))+  # grey
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
scale_fill_tableau() +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_fill_manual(values = c("Labs - Ind" = "#4CAF50",   # green
"Labs - Grp"   = "#A9A9A9"))+  # grey
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
scale_fill_tableau() +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_fill_manual(values = c("Labs - Ind" = "#4CAF50",   # green
"Labs - Grp"   = "#A9A9A9"))+  # grey
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
labs(
title = "Grade distribution by Lab Bin",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_fill_manual(values = c("Labs - Ind" = "#4CAF50",   # green
"Labs - Grp"   = "#A9A9A9"))+  # grey
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
labs(
title = "Grade distribution in Lab Program AY 25-2",
x = "Letter grade",
y = "Percent of students"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_fill_manual(values = c("Labs - Ind" = "#4CAF50",   # green
"Labs - Grp"   = "#A9A9A9"))+  # grey
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
labs(
title = "Grade distribution in Lab Program AY 25-2",
x = "Letter grade",
y = "Percent of students",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_fill_manual(values = c("Labs - Ind" = "#4CAF50",   # green
"Labs - Grp"   = "#A9A9A9"))+  # grey
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
labs(
title = "Grade distribution in Lab Program AY 25-2",
x = "Letter grade",
y = "Percent of students",
fill = ""
) +
theme_minimal(base_size = 16) +
theme(legend.position = "top")
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_fill_manual(values = c("Labs - Ind" = "#4CAF50",   # green
"Labs - Grp"   = "#A9A9A9"))+  # grey
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
labs(
title = "Grade distribution in Lab Program AY 25-2",
x = "Letter grade",
y = "Percent of students",
fill = ""
) +
theme_minimal(base_size = 16) +
theme(legend.position = "bottom")
ggsave(
filename = "Lab Grade Summary AY25-2.png",
device = "png",
path = wd,
width = 8,
height = 4,
units = "in",
dpi = 300
)
# 3. Plot
ggplot(lab_grade_pct, aes(grade, pct, fill = lab_bin)) +
geom_col(position = position_dodge(width = 0.7),width = 0.6) +
geom_text(aes(label = label),
position = position_dodge(width = 0.7),
vjust = -0.35, size = 4.5) +
scale_fill_manual(values = c("Labs - Ind" = "#4CAF50",   # green
"Labs - Grp"   = "#A9A9A9"))+  # grey
scale_y_continuous(
labels = percent,
expand = expansion(mult = c(0, 0.1))   # a little head-room
) +
labs(
title = "Grade distribution in Lab Program AY 25-2",
x = "Letter grade",
y = "Percent of students",
fill = ""
) +
theme_bw(base_size = 16) +
theme(legend.position = "bottom")
ggsave(
filename = "Lab Grade Summary AY25-2.png",
device = "png",
path = wd,
width = 8,
height = 4,
units = "in",
dpi = 300
)
shiny::runApp()
sections <- lapply(course_list_df$id, function(x) {
incProgress(1 / length(unique(course_list_df$id)),
detail = paste("Loading course data for course", x)
)
get_section_info(x, include = "total_students")
})
course_list_df %>% filter(id=9882)
course_list_df %>% filter(id==9882)
course_list_df %>% filter(id==10429)
course_list_df %>% filter(id==9882)
course_list_df %>% filter(id==9883)
saveRDS(course_list_df,test.rds)
# library(rcanvas)
library(dplyr)
library(httr)
library(jsonlite)
library(tidyr)
library(stringr)
library(pbapply) # progress bar for *apply family
library(purrr)
library(tibble)
library(uuid) # for generating UUIDs
library(readxl)
source("canvas_api_R/api access.R")
shiny::runApp()
shiny::runApp()
df <- course_list_df() %>%
filter(id %in% selected_courses()$idget_student_roster(
# message to user to select assignments
roster_course_df(),
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
course_list_df()
df <- course_list_df() %>%
filter(id %in% selected_courses()$id
get_student_roster(
df <- course_list_df() %>% filter(id %in% selected_courses()$id
get_student_roster(
df <- course_list_df() %>% filter(id %in% selected_courses()$id
get_student_roster(df,
df <- course_list_df() %>% filter(id %in% selected_courses()$id)
selected_courses()
df <- course_list_df() %>% filter(section_id %in% selected_courses()$section_id)
get_student_roster(df,
# message to user to select assignments
roster_course_df(),
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
roster.course <- roster_course_df()
View(roster.course)
shiny::runApp()
#improves search down to the actual selected
df <- course_list_df() %>% filter(section_id %in% selected_courses()$section_id)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
shiny::runApp()
#improves search down to the actual selected
df <- course_list_df() %>% filter(section_id %in% selected_courses()$section_id)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
shiny::runApp()
#improves search down to the actual selected
df <- course_list_df() %>% filter(section_id %in% selected_courses()$section_id)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
shiny::runApp()
#improves search down to the actual selected
df <- course_list_df() %>% filter(section_id %in% selected_courses()$section_id)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
roster.course <- roster_course_df()
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
roster.course <- roster_course_df()
#improves search down to the actual selected
df <- course_list_df() %>% filter(id %in% selected_courses()$id)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
roster.course <- roster_course_df()
shiny::runApp()
#improves search down to the actual selected
df <- course_list_df() %>% filter(id %in% selected_courses()$id)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
roster.course <- roster_course_df()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#improves search down to the actual selected
df <- course_list_df() %>% filter(section_id %in% selected_courses()$section_id)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
shiny::runApp()
#improves search down to the actual selected
df <- course_list_df() %>% filter(section_id %in% selected_courses()$section_id)
roster_course_df(
get_student_roster(df,
# message to user to select assignments
canvas_errorlist, INSTRUCTOR_SEARCH_KEY
))
shiny::runApp()
shiny::runApp()
force(course_df)
force(error_list)
force(instructor.search.key)
# error_list definition
enrollment.list <- lapply(unique(course_df$id), function(x, i) {
incProgress(1 / length(unique(course_df$id)))
tryCatch(
{
get_course_items(course_id = x, item = "enrollments", include = "current_points")
},
error = function(e) {
# Append error message to the reactive list
current_errors <- error_list
error_list(c(current_errors, list(paste("Error processing course ID:", x, "->", e$message))))
return(NULL) # Return NULL for failed courses
}
)
}, i = seq_along(course_df))
get_course_items(course_id = 9882, item = "enrollments", include = "current_points")
items <- get_course_items(course_id = 9882, item = "enrollments", include = "current_points")
shiny::runApp()
force(course_df)
items <- get_course_items(course_id = 9882, item = "enrollments", include = "current_points")
shiny::runApp()
shiny::runApp()
items <- get_course_items(course_id = 9882, item = "enrollments", include = "current_points")
shiny::runApp()
items <- get_course_items(course_id = 9882, item = "enrollments", include = "current_points")
View(items)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
