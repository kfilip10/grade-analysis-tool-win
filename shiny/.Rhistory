#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#### Custom CSS example, .sidebar isn't used but container for use later####
customCSS <- function() {
tags$head(
tags$style(
HTML(
"
/* Custom CSS to change font size of sidebar */
.sidebar {
font-size: 18px; /* Change font size as needed */
}
"
)
)
)
}
#### Load Global Variables and some setup ####
source('global.R') #loads 'global.R' file into environment, there may be a better way to do this but this works for now
sourceAllFilesInFolder(file.path(getwd(),"handlers")) #loads the files in the handlers folder
sourceAllFilesInFolder(file.path(getwd(),"functions")) #loads the files in the functions folder
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
(function(req_file, install = T, update = F, silent = F) {
# Read text file containing required packages
req <- scan(req_file, character(), quiet = T)
# Update packages
if (update) {
update.packages(repos = "https://cloud.r-project.org", ask = F)
}
# Install missing packages
if (length(req) > 0 & install) {
missing_packages <- req[!(req %in% installed.packages()[,"Package"])]
if (length(missing_packages) > 0) {
install.packages(
missing_packages,
repos = "https://cloud.r-project.org",
dependencies = T,
clean = T
)
}
}
# Load packages
if (silent) {
suppressPackageStartupMessages(invisible(lapply(req, library, character.only = T)))
} else {
lapply(req, library, character.only = T)
}
})(file.path(getwd(),"req.txt"), silent = F)#This line calls the function with those arguments
#### Function to load packages ####
req <- scan(file.path(getwd(), "req.txt"), character(), quiet = T)#This was how it was in standalone
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
# app.R
# Purpose: This is the main file for the Grade Report Generator. It is the file that is run to start the application.
# Started with a simple template from https://shiny.posit.co/r/gallery/start-simple/faithful/
# Modularized over time to make it easier to maintain and add new features piece by piece
# Structure:
# - ui calls functions in the handlers folder to create the UI
# - server calls corresponding functions in the handlers folder which passes the session to communicate back and forth
# - Each handler script includes its UI and server functions
# - shinyApp(ui = ui, server = server) launches the app
# Some Resources for shiny:
# - https://mastering-shiny.org/index.html
# - https://shiny.rstudio.com/tutorial/
#### Function to load packages ####
req <- scan(file.path(getwd(), "req.txt"), character(), quiet = T)#This was how it was in standalone
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#### Custom CSS example, .sidebar isn't used but container for use later####
customCSS <- function() {
tags$head(
tags$style(
HTML(
"
/* Custom CSS to change font size of sidebar */
.sidebar {
font-size: 18px; /* Change font size as needed */
}
"
)
)
)
}
#### Load Global Variables and some setup ####
source('global.R') #loads 'global.R' file into environment, there may be a better way to do this but this works for now
sourceAllFilesInFolder(file.path(getwd(),"handlers")) #loads the files in the handlers folder
sourceAllFilesInFolder(file.path(getwd(),"functions")) #loads the files in the functions folder
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
# app.R
# Purpose: This is the main file for the Grade Report Generator. It is the file that is run to start the application.
# Started with a simple template from https://shiny.posit.co/r/gallery/start-simple/faithful/
# Modularized over time to make it easier to maintain and add new features piece by piece
# Structure:
# - ui calls functions in the handlers folder to create the UI
# - server calls corresponding functions in the handlers folder which passes the session to communicate back and forth
# - Each handler script includes its UI and server functions
# - shinyApp(ui = ui, server = server) launches the app
# Some Resources for shiny:
# - https://mastering-shiny.org/index.html
# - https://shiny.rstudio.com/tutorial/
#### Function to load packages ####
req <- scan(file.path(getwd(), "req.txt"), character(), quiet = T)#This was how it was in standalone
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#### Custom CSS example, .sidebar isn't used but container for use later####
customCSS <- function() {
tags$head(
tags$style(
HTML(
"
/* Custom CSS to change font size of sidebar */
.sidebar {
font-size: 18px; /* Change font size as needed */
}
"
)
)
)
}
#### Load Global Variables and some setup ####
source('global.R') #loads 'global.R' file into environment, there may be a better way to do this but this works for now
sourceAllFilesInFolder(file.path(getwd(),"handlers")) #loads the files in the handlers folder
sourceAllFilesInFolder(file.path(getwd(),"functions")) #loads the files in the functions folder
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
#' Sourced from r-canvas github: https://github.com/daranzolin/rcanvas
#' Some edits made for functionality
#'
#' Process a Canvas API response
#'
#' Wrapper function for common tasks in going from Canvas URL to data.frame. Most
#' of the heavy lifting is done in \code{paginate}, which finds which pages to
#' download. This function adds necessary arguments to those pages (e.g. the
#' authentication token), downloads the content, converts from JSON into
#' data.frame format, and if there are multiple pages/data.frames, converts it
#' into one final data.frame if able.
#'
#' @param url url to query
#' @param args query arguments to be passed to \code{httr}, e.g. auth token
#'
#' @return processed dataframe or list if unable to simplify
#' @importFrom magrittr `%>%`
process_response <- function(url, args) {
resp <- canvas_query(url, args, "GET")
d <- paginate(resp) %>%
purrr::map(httr::content, "text") %>%
purrr::map(jsonlite::fromJSON, flatten = TRUE)
# flatten to data.frame if able, otherwise return as is
#d <- tryCatch(purrr::map_df(d, purrr::flatten_df),
#              error = function(e) d)
dplyr::bind_rows(d)
}
#' Get responses from Canvas API pages
#'
#' @description The Canvas headers include a link object (usually), in form:
#' \code{Link:
#' <https://canvas.url/api/v1/[...]?page=1&per_page=10>; rel="current",
#' <https://canvas.url/api/v1/[...]?page=2&per_page=10>; rel="next",
#' <https://canvas.url/api/v1/[...]?page=1&per_page=10>; rel="first",
#' <https://canvas.url/api/v1/[...]?page=15&per_page=10>; rel="last"}
#'
#' In this case, we need to download every page from 1 to 15 to capture all data.
#' This function parses the response object intelligently, using only HEAD
#' requests, to figure out these page requirements.
#'
#' @param x a httr response object
#' @param showProgress if TRUE (default), show a textual progress bar
#'
#' @return unparsed responses
#'
#' @examples
#' \dontrun{resp <- canvas_query(url, args, "HEAD")
#' get_pages(resp)}
paginate <- function(x, showProgress=T) {
first_response <- list(x)
stopifnot(httr::status_code(x) == 200) # OK status
pages <- httr::headers(x)$link
if (is.null(pages)) return(first_response)
should_continue <- TRUE
if (has_rel(pages, "last")) {
last_page <- get_page(x, "last")
n_pages <- readr::parse_number(stringr::str_extract(last_page, "page=[0-9]{1,}"))
if (n_pages == 1){
return(first_response)
}else-if (n_pages == 100){
return(first_response)
}
pages <- increment_pages(last_page, 2:n_pages)
if (showProgress){
bar = txtProgressBar(max=n_pages, style = 3)
}
queryfunc = function(...) {if (showProgress) bar$up(bar$getVal()+1); canvas_query(...)}
responses <- pages %>%
purrr::map(queryfunc, args = list(access_token = check_token()))
responses <- c(first_response, responses)
return(responses)
} else {
if (has_rel(httr::headers(x)$link, "next")) {
pages[[1]] <- get_page(x, "current")
inc <- 2
# edge case for if there is no 'last' header, see:
# https://canvas.instructure.com/doc/api/file.pagination.html
# https://github.com/daranzolin/rcanvas/issues/4
while (should_continue) {
page_temp <- get_page(x, "next")
pages[[inc]] <- page_temp
x <- canvas_query(page_temp,
args = list(access_token = check_token()),
type = "HEAD")
if (!has_rel(httr::headers(x)$link, "next")) {
should_continue <- FALSE
} else {
inc <- inc + 1
}
}
responses <- pages %>%
purrr::map(canvas_query, args = list(access_token = check_token()))
}
}
}
increment_pages <- function(base_url, n_pages) {
# odd regex but necessary, see http://regexr.com/3evr4
stringr::str_replace(base_url, "([\\?&])(page=[0-9a-zA-Z]{1,})",
sprintf("\\1page=%s", n_pages))
}
has_rel <- function(x, rel) {
stopifnot(!is.null(rel))
any(grepl(paste0("rel=\"", rel, "\""), x))
}
get_page <- function(resp, page) {
pages <- resp$headers$link
url_pattern <- "http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+"
pages <- stringr::str_split(pages, ",")[[1]]
url <- stringr::str_subset(pages, page)
url <- stringr::str_extract(url, url_pattern)
url <- stringr::str_replace_all(url, "[<>;]", "")
return(url)
}
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
#### Global Functions ####
#function to source all subfiles
sourceAllFilesInFolder <- function(folder_path) {
file_list <- list.files(folder_path, pattern = "\\.R$", full.names = TRUE)
for (file in file_list) {
source(file)
}
}
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
# app.R
# Purpose: This is the main file for the Grade Report Generator. It is the file that is run to start the application.
# Started with a simple template from https://shiny.posit.co/r/gallery/start-simple/faithful/
# Modularized over time to make it easier to maintain and add new features piece by piece
# Structure:
# - ui calls functions in the handlers folder to create the UI
# - server calls corresponding functions in the handlers folder which passes the session to communicate back and forth
# - Each handler script includes its UI and server functions
# - shinyApp(ui = ui, server = server) launches the app
# Some Resources for shiny:
# - https://mastering-shiny.org/index.html
# - https://shiny.rstudio.com/tutorial/
#### Function to load packages ####
req <- scan(file.path(getwd(), "req.txt"), character(), quiet = T)#This was how it was in standalone
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#### Custom CSS example, .sidebar isn't used but container for use later####
customCSS <- function() {
tags$head(
tags$style(
HTML(
"
/* Custom CSS to change font size of sidebar */
.sidebar {
font-size: 18px; /* Change font size as needed */
}
"
)
)
)
}
#### Load Global Variables and some setup ####
source('global.R') #loads 'global.R' file into environment, there may be a better way to do this but this works for now
sourceAllFilesInFolder(file.path(getwd(),"handlers")) #loads the files in the handlers folder
sourceAllFilesInFolder(file.path(getwd(),"functions")) #loads the files in the functions folder
#sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
#Changes max file upload size to 30 MB
options(shiny.maxRequestSize = 30*1024^2)
#Runs the function to check if the grade csv exists and also makes the settings folder
####Load UI####
ui <- fluidPage(
theme = bs_theme(version = 4, bootswatch = "flatly"),
useShinyjs(), #shiny JS used for hiding/showing elements and enables html formatting https://deanattali.com/shinyjs/overview#demo
#navbarPage - creates a navbar at the top of the page
navbarPage(
id = "navbarID",
#title and logo. Logo won't load when launching from R Studio, works in deployed app
title=div(
img(src = "PANE.png", height = "35px", width = "30px", style = "margin-right: 10px;"),
"Grade Report Generator"
),
#Makes the home page. createHomePage() is in the handlers folder
tabPanel("Home",icon = icon("home"),  createHomePage() #icons from: https://www.w3schools.com/bootstrap/bootstrap_ref_comp_glyphs.asp
),
#Prep and Canvas Data
tabPanel("Prep and Canvas Data",
value = "prep_panel",
uiOutput("dynamicUI"),
icon = icon("cloud",lib="glyphicon")
),
#Makes the pre-WPR data prep page. createPreWPRPage() is in the handlers folder
tabPanel("Pre-WPR Prep",icon = icon("list-alt",lib="glyphicon"),createPreWPRPage()
),
#Makes the WPR Analysis and Brief page. This page within the navbar has multiple tabs (tabsetPanel handles those)
tabPanel("WPR Analysis and Brief", icon = icon("stats",lib="glyphicon"), # Using a Shiny icon for comparison
tabsetPanel(
tabPanel("Upload Data", createBriefUploadPage()
),
tabPanel("Create Brief",createBriefPage()
),
#this is for making the distribution plots, as this becomes more robust it will become a standalone function/module
tabPanel("Version Grade DistributionPlots",
div(
h2(HTML("<b>Plot Parameters</b>"), style="text-align:left"),
uiOutput("dynamic_inputs")
),
verbatimTextOutput("summary"),
plotOutput("barplot")
),
#This is a tabular view of the version summary data
tabPanel("Version Summary",
tableOutput("versionTable"),
verbatimTextOutput("Excel Viewer")
)
),
),
#Post Brief OML is not integrated yet
#tabPanel("Post Brief OML",icon=icon("list"),createOMLPage()),
#Brief without Canvas is buggy as of 6JAN. Need to make it more robust
tabPanel("Brief without Canvas",icon=icon("warning-sign",lib="glyphicon"),createManualPage()),
#Settings page which will write to a folder defined in global.R
tabPanel("Settings",icon=icon("cog"),createSettingsPage()
),
#FAQ page which is sparse as of 6JAN
tabPanel("FAQ",icon=icon("question"),createFAQPage(),
)
),
# Custom CSS to change font size of the bin_width but that is removed for now.
# tags$head(
#   tags$style(HTML("
#     /* Custom CSS to resize numeric input */
#     #bin_width[type='number'] {
#       width: 50px; /* Change the width to your desired value */
#     }
#   "))
# ),
)
# Server
server <- function(input, output, session) {
output$dynamicUI <- renderUI({
if (input$navbarID == "prep_panel") {
createCanvasPrepPage()
}
})
# Pre WPR Prep logic and display
preWPR_Handler(input, output, session)
# Settings logic and display
settings_Handler(input, output, session)
# Brief logic and display
brief_Handler(input, output, session)
#Manual brief logic and display
brief_Manual_Handler(input, output, session)
#### Task Kill ####
session$onSessionEnded(function() {
stopApp()
# you can put your code here to close the connection
})
}
shinyApp(ui = ui, server = server)
# app.R
# Purpose: This is the main file for the Grade Report Generator. It is the file that is run to start the application.
# Started with a simple template from https://shiny.posit.co/r/gallery/start-simple/faithful/
# Modularized over time to make it easier to maintain and add new features piece by piece
# Structure:
# - ui calls functions in the handlers folder to create the UI
# - server calls corresponding functions in the handlers folder which passes the session to communicate back and forth
# - Each handler script includes its UI and server functions
# - shinyApp(ui = ui, server = server) launches the app
# Some Resources for shiny:
# - https://mastering-shiny.org/index.html
# - https://shiny.rstudio.com/tutorial/
#### Function to load packages ####
req <- scan(file.path(getwd(), "req.txt"), character(), quiet = T)#This was how it was in standalone
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#### Custom CSS example, .sidebar isn't used but container for use later####
customCSS <- function() {
tags$head(
tags$style(
HTML(
"
/* Custom CSS to change font size of sidebar */
.sidebar {
font-size: 18px; /* Change font size as needed */
}
"
)
)
)
}
#### Load Global Variables and some setup ####
source('global.R') #loads 'global.R' file into environment, there may be a better way to do this but this works for now
sourceAllFilesInFolder(file.path(getwd(),"handlers")) #loads the files in the handlers folder
sourceAllFilesInFolder(file.path(getwd(),"functions")) #loads the files in the functions folder
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
#### Global Functions ####
#function to source all subfiles
file.path(getwd(),"functions","canvas api")
#### Global Functions ####
#function to source all subfiles
folder_path <- file.path(getwd(),"functions","canvas api")
file_list <- list.files(folder_path, pattern = "\\.R$", full.names = TRUE)
file_list
# app.R
# Purpose: This is the main file for the Grade Report Generator. It is the file that is run to start the application.
# Started with a simple template from https://shiny.posit.co/r/gallery/start-simple/faithful/
# Modularized over time to make it easier to maintain and add new features piece by piece
# Structure:
# - ui calls functions in the handlers folder to create the UI
# - server calls corresponding functions in the handlers folder which passes the session to communicate back and forth
# - Each handler script includes its UI and server functions
# - shinyApp(ui = ui, server = server) launches the app
# Some Resources for shiny:
# - https://mastering-shiny.org/index.html
# - https://shiny.rstudio.com/tutorial/
#### Function to load packages ####
req <- scan(file.path(getwd(), "req.txt"), character(), quiet = T)#This was how it was in standalone
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#### Custom CSS example, .sidebar isn't used but container for use later####
customCSS <- function() {
tags$head(
tags$style(
HTML(
"
/* Custom CSS to change font size of sidebar */
.sidebar {
font-size: 18px; /* Change font size as needed */
}
"
)
)
)
}
#### Load Global Variables and some setup ####
source('global.R') #loads 'global.R' file into environment, there may be a better way to do this but this works for now
sourceAllFilesInFolder(file.path(getwd(),"handlers")) #loads the files in the handlers folder
sourceAllFilesInFolder(file.path(getwd(),"functions")) #loads the files in the functions folder
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
# app.R
# Purpose: This is the main file for the Grade Report Generator. It is the file that is run to start the application.
# Started with a simple template from https://shiny.posit.co/r/gallery/start-simple/faithful/
# Modularized over time to make it easier to maintain and add new features piece by piece
# Structure:
# - ui calls functions in the handlers folder to create the UI
# - server calls corresponding functions in the handlers folder which passes the session to communicate back and forth
# - Each handler script includes its UI and server functions
# - shinyApp(ui = ui, server = server) launches the app
# Some Resources for shiny:
# - https://mastering-shiny.org/index.html
# - https://shiny.rstudio.com/tutorial/
#### Function to load packages ####
req <- scan(file.path(getwd(), "req.txt"), character(), quiet = T)#This was how it was in standalone
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#### Custom CSS example, .sidebar isn't used but container for use later####
customCSS <- function() {
tags$head(
tags$style(
HTML(
"
/* Custom CSS to change font size of sidebar */
.sidebar {
font-size: 18px; /* Change font size as needed */
}
"
)
)
)
}
#### Load Global Variables and some setup ####
source('global.R') #loads 'global.R' file into environment, there may be a better way to do this but this works for now
sourceAllFilesInFolder(file.path(getwd(),"handlers")) #loads the files in the handlers folder
sourceAllFilesInFolder(file.path(getwd(),"functions")) #loads the files in the functions folder
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
