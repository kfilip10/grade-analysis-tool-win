runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
saveRDS(df,file ="uploaded template graded.rds")
saveRDS(df,file ="env/uploaded template graded.rds")
saveRDS(df,file ="env/uploaded template graded.rds")
# saveRDS(df,file ="env/uploaded template graded.rds")
df <- loadRDS("env/uploaded template graded.rds")
# saveRDS(df,file ="env/uploaded template graded.rds")
df <- load("env/uploaded template graded.rds")
# saveRDS(df,file ="env/uploaded template graded.rds")
df <- readRDS("env/uploaded template graded.rds")
df <- readRDS("env/uploaded template graded.rds")
View(df)
View(df)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(list.df)
View(list.df)
View(list.df[[2]])
View(df.list)
View(df.list[[1]])
View(df.list[[2]])
View(df.list[[3]])
View(df.list[[1]])
View(df.list[[4]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df.roster)
View(df.total)
#retrieve the section from df.roster for each element in did_not_take_any_exam
no.entries <- df.total[df.total$Name %in% did_not_take_any_exam,]
#combines for summary df and question df
# df.total is used for the summary data
# df.q dataframe is used for the question data
# df.q needs an entry for every cadet that took times the number of problems (247x8x2 roughly 3705)
# question, score, concept, cut.page, max (points), v.label ("Version 1"), version (num)
#i=1
df.roster <- gb[[1]][[3]]
View(df.roster)
runApp()
View(df.roster)
runApp()
View(df.data)
df.data[complete.cases(df.data),]
test <- df.data[complete.cases(df.data),]
View(test)
course.roster <- course.roster[complete.cases(df.data),]
#remove all rows that have incomplete data
course.roster <- data.frame(df.data["ID"],
df.data["Section"],
df.data["Name"],
df.data["Course ID"],
df.data["Assignment ID"])
course.roster <- course.roster[complete.cases(course.roster),]
View(course.roster)
runApp()
runApp()
runApp()
#retrieve the section from df.roster for each element in did_not_take_any_exam
no.entries <- df.roster[df.roster$Name %in% did_not_take_any_exam,]
runApp()
runApp()
View(df.total)
View(duplicate.entries)
View(df.head)
dup.entries <- df.roster[df.roster$Name %in% duplicate.entries$Name,]
runApp()
runApp()
View(grades.df)
runApp()
runApp()
#left join df.total and df.roster by ID
df.total <- left_join(df.total%>%select(ID,Course.ID,Assignment.ID),df.roster,by="ID")
#left join df.total and df.roster by ID
df.total <- left_join(df.total,df.roster%>%select(ID,Course.ID,Assignment.ID),by="ID")
#rename mge.points to points
grades.df <- grades.df %>% rename(points = mge.points,
course_id = Course.ID,
assignment_id = Assignment.ID)
#rename mge.points to points
grades.df <- grades.df %>% rename(points = mge.points,
course_id = Course.ID,
assignment_id = Assignment.ID)
#this is the function that will be applied to each course_id group
#resp <- lapply(split(roster.course, roster.course$course_id), bulk_grade_post)
#expects a dataframe from the gradebook with columns: course_id, user_id, id (from assignment table), points
# to get the bulk grades posted I need the following in the df:
#' @param course_id [Integer] id from course roster
#' @param user_id [Integer] id from course roster
#' @param assignment_id [Integer] id from assignment list (labelled 'id')
#' @param points [Integer] number of points to assign, labelled in course roster as 'points'
#' @req dataframe with combined course roster
#' @req dataframe with combined assignment list
grade_assignments_bulk <- function(df){
if(length(unique(df$assignment_id)) > 1) stop("Only one assignment_id allowed")
assignment_id <- unique(df$assignment_id)
course_id <- unique(df$course_id)
grade_data <- setNames(as.list(df$points), paste0('grade_data[', df$id, '][posted_grade]'))
url <- make_canvas_url('courses',course_id, "assignments", assignment_id, "submissions/update_grades")
response <- POST(url,
add_headers(Authorization = paste("Bearer", check_token())),
body = grade_data,
encode = 'form')
#then I need to return the result as success or failure and return the course id and assignment id
#if success then return the course_id and assignment_id
#if failure then return the course_id and assignment_id and the response
if (response$status_code == 200) {return(paste(assignment_id, " succesfully updated for course ",course_id))}
else{return(paste(assignment_id, " failed to update for course ",course_id, " with response ", response$status_code))}
}
resp <- lapply(split(grades.df, grades.df$course_id), grade_assignments_bulk)
#rename mge.points to points
grades.df <- grades.df %>% rename(id=ID,
points = mge.points,
course_id = Course.ID,
assignment_id = Assignment.ID)
#ID, Name,version,Section, Course.ID,Assignment.ID,mge.points
grades.df <- canvas.upload.df$dataframes[[1]]
#rename mge.points to points
grades.df <- grades.df %>% rename(id=ID,
points = mge.points,
course_id = Course.ID,
assignment_id = Assignment.ID)
resp <- lapply(split(grades.df, grades.df$course_id), grade_assignments_bulk)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(api_test)
View(api_test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("pingr")
runApp()
runApp()
runApp()
runApp()
canvas_api_token <- readRDS("E:/Google Drive/12. Git/grade-analysis-tool-win/shiny/canvas_api_token.rds")
api <- readRDS("E:/Google Drive/12. Git/grade-analysis-tool-win/shiny/api.rds")
api[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
check_domain()
api_test()
api_test()
print(get("rcanvas_CANVAS_DOMAIN", envir = cdenv))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#filter the assignments list to only include the common assignments
assignments.common.df <- lapply(assignments, function(x) x[x$name %in% assignments.common,])
View(assignments.common.df)
View(assignments.common.df)
assignments.common.df[[1]][["name"]]
#combines the assignment lists into one dataframe
assignments.comb <- do.call(rbind, assignments.common.df)
View(assignments.comb)
runApp()
runApp()
runApp()
runApp()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% pivot_wider(names_from = assignment_name,
values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.xl <- roster.course  %>% left_join(gb.comb.parse, by = "user_id")
gb.xl <- roster.course  %>%
left_join(gb.comb.parse %>%
select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,Max Points,section), by = "user_id")
gb.xl <- roster.course  %>%
left_join(gb.comb.parse %>%
select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`,section), by = "user_id")
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`,section)  %>%
left_join(gb.comb.parse, by = "user_id")
gb.xl <- gb.xl %>% mutate(Score = Score/100)
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")
gb.xl <- gb.xl %>% mutate(Score = Score/100)
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb.xl <- gb.xl %>% rename(gb.xl, ID = user_id, Name = user.sortable_name,
Email = user.login_id, Score = Score, Grade = Grade, Points = Points,
`Max Points` = `Max Points`)
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb.xl <- rename(gb.xl, ID = user_id, Name = user.sortable_name,
Email = user.login_id, Score = Score, Grade = Grade, Points = Points,
`Max Points` = `Max Points`)
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")
gb.xl <- gb.xl %>% mutate(Score = Score/100)
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb.xl <- rename(gb.xl, ID = user_id, Name = user.sortable_name, `Course ID` = course_id,
Instructor = instructor, Section = section,
Email = user.login_id, Score = Score, Grade = Grade, Points = Points,
`Max Points` = `Max Points`)
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name)%>%  pivot_wider(names_from = assignment_name,
values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")
gb.xl <- gb.xl %>% mutate(Score = Score/100)
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name)%>%  pivot_wider(names_from = assignment_name,
values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name)%>%  pivot_wider(names_from = assignment_name,
values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}") %>%
mutate(Score = Score/100)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name)%>%  pivot_wider(names_from = assignment_name,
values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}") %>%
mutate(Score = Score/100)
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name)%>%  pivot_wider(names_from = assignment_name,
values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100)
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb.xl <- rename(gb.xl, ID = user_id, Name = user.sortable_name, `Course ID` = course_id,
Instructor = instructor, Section = section,
Email = user.login_id, Score = Score, Grade = Grade, Points = Points,
`Max Points` = `Max Points`)
gb.comb.parse <- course_gradebook()
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name)%>%
pivot_wider(names_from = assignment_name,
values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100)
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb.xl <- rename(gb.xl, ID = user_id, Name = user.sortable_name, `Course ID` = course_id,
Instructor = instructor, Section = section,
Email = user.login_id, Score = Score, Grade = Grade, Points = Points,
`Max Points` = `Max Points`)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100)
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100)
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb.xl <- rename(gb.xl, ID = user_id, Name = user.sortable_name, `Course ID` = course_id,
Instructor = instructor, Section = section,
Email = user.login_id, Score = Score, Grade = Grade, Points = Points,
`Max Points` = `Max Points`)
gb.xl <- gb.xl %>% select(ID,Name,Email,`Course ID`,Instructor,Section,
Grade,Score,Points,`Max Points`,everything())
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=1))
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb.xl <- rename(gb.xl, ID = user_id, Name = user.sortable_name, `Course ID` = course_id,
Instructor = instructor, Section = section,
Email = user.login_id, Score = Score, Grade = Grade, Points = Points,
`Max Points` = `Max Points`)
gb.xl <- gb.xl %>% select(ID,Name,Email,`Course ID`,Instructor,Section,
Grade,Score,Points,`Max Points`,everything())
runApp()
