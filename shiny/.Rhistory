test_assign <- pmap(assign_list, function(...) {
x <- list(...)
get_bulk_assignments2(x[[1]], x[[2]])
#print(x[[1]]) - course id
# print(x[[2]]) - list of assignment ids
}) %>%
bind_rows()
end_time2 <- Sys.time()
time_taken2 <- end_time2 - start_time2
print(time_taken2) #time/section/assignment #best is .4
View(test_assign)
View(gb.canvas)
get_bulk_assignments2 <- function(course_id,assignment_list,progress=FALSE){
#browser()
n_pages <- ceiling(20*length(assignment_list)/100)
combined_assignments <- paste(assignment_list, collapse = ", ")
#Left off here what's next? make arguments
url <- make_canvas_url('courses',course_id, "students/submissions")
query_params  <- list(`student_ids[]` = "all",
`assignment_ids[]` = combined_assignments,
per_page = 100
)
#assignment_query <- iter_args_list(course.list$id, "assignment_ids[]")
#args <- c(args, assignment_query)
response <- GET(url,
add_headers(Authorization = paste("Bearer", check_token())),
query  = query_params,
encode = 'form')
d <- paginate(response) %>%
purrr::map(httr::content, "text") %>%
purrr::map(jsonlite::fromJSON, flatten = TRUE)
# flatten to data.frame if able, otherwise return as is
#d <- tryCatch(purrr::map_df(d, purrr::flatten_df),
#              error = function(e) d)
d <- dplyr::bind_rows(d)
return(d)
}
start_time2 <- Sys.time()
#so I want to get a list of all the assignments for each course
#Then I can pass a list of assignment_ids all at once in the get_bulk_assignments function
assign_list <- assign.df %>% group_by(course_id) %>% summarise(assignments = list(id))
#apply the get_bulk_assignments function to each course
test_assign <- pmap(assign_list, function(...) {
x <- list(...)
get_bulk_assignments2(x[[1]], x[[2]])
#print(x[[1]]) - course id
# print(x[[2]]) - list of assignment ids
}) %>%
bind_rows()
end_time2 <- Sys.time()
time_taken2 <- end_time2 - start_time2
print(time_taken2) #time/section/assignment #best is .4
print(time_taken1) #time/section/assignment
get_bulk_assignments2 <- function(course_id,assignment_list,progress=FALSE){
#browser()
n_pages <- ceiling(20*length(assignment_list)/100)
combined_assignments <- paste(assignment_list, collapse = ", ")
#Left off here what's next? make arguments
url <- make_canvas_url('courses',course_id, "students/submissions")
query_params  <- list(`student_ids[]` = "all",
per_page = 100
)
query <- c(query, setNames(as.list(assignment_list), rep("assignment_ids[]", length(assignment_list))))
#assignment_query <- iter_args_list(course.list$id, "assignment_ids[]")
#args <- c(args, assignment_query)
response <- GET(url,
add_headers(Authorization = paste("Bearer", check_token())),
query  = query_params,
encode = 'form')
d <- paginate(response) %>%
purrr::map(httr::content, "text") %>%
purrr::map(jsonlite::fromJSON, flatten = TRUE)
# flatten to data.frame if able, otherwise return as is
#d <- tryCatch(purrr::map_df(d, purrr::flatten_df),
#              error = function(e) d)
d <- dplyr::bind_rows(d)
return(d)
}
get_bulk_assignments2 <- function(course_id,assignment_list,progress=FALSE){
#browser()
n_pages <- ceiling(20*length(assignment_list)/100)
combined_assignments <- paste(assignment_list, collapse = ", ")
#Left off here what's next? make arguments
url <- make_canvas_url('courses',course_id, "students/submissions")
query_params  <- list(`student_ids[]` = "all",
per_page = 100
)
query_params <- c(query_params, setNames(as.list(assignment_list), rep("assignment_ids[]", length(assignment_list))))
#assignment_query <- iter_args_list(course.list$id, "assignment_ids[]")
#args <- c(args, assignment_query)
response <- GET(url,
add_headers(Authorization = paste("Bearer", check_token())),
query  = query_params,
encode = 'form')
d <- paginate(response) %>%
purrr::map(httr::content, "text") %>%
purrr::map(jsonlite::fromJSON, flatten = TRUE)
# flatten to data.frame if able, otherwise return as is
#d <- tryCatch(purrr::map_df(d, purrr::flatten_df),
#              error = function(e) d)
d <- dplyr::bind_rows(d)
return(d)
}
start_time2 <- Sys.time()
#so I want to get a list of all the assignments for each course
#Then I can pass a list of assignment_ids all at once in the get_bulk_assignments function
assign_list <- assign.df %>% group_by(course_id) %>% summarise(assignments = list(id))
#apply the get_bulk_assignments function to each course
test_assign <- pmap(assign_list, function(...) {
x <- list(...)
get_bulk_assignments2(x[[1]], x[[2]])
#print(x[[1]]) - course id
# print(x[[2]]) - list of assignment ids
}) %>%
bind_rows()
end_time2 <- Sys.time()
time_taken2 <- end_time2 - start_time2
print(time_taken2) #time/section/assignment #best is .4
start_time <- Sys.time()
gb.canvas <- assign.df %>%
group_by(id) %>% #or can use 'course_id' with distinct(), this was a little faster
#distinct () %>%
group_split() %>%
lapply(function(.x) {
incProgress(1/length(unique(assign.df$course_id)))
get_bulk_assignments(.x, unique(.x$course_id))
}) %>%
bind_rows()
end_time <- Sys.time()
time_taken1 <- end_time - start_time
print(time_taken1) #time/section/assignment
start_time2 <- Sys.time()
#so I want to get a list of all the assignments for each course
#Then I can pass a list of assignment_ids all at once in the get_bulk_assignments function
assign_list <- assign.df %>% group_by(course_id) %>% summarise(assignments = list(id))
#apply the get_bulk_assignments function to each course
test_assign <- pmap(assign_list, function(...) {
x <- list(...)
get_bulk_assignments2(x[[1]], x[[2]])
#print(x[[1]]) - course id
# print(x[[2]]) - list of assignment ids
}) %>%
bind_rows()
end_time2 <- Sys.time()
time_taken2 <- end_time2 - start_time2
print(time_taken2) #time/section/assignment #best is .4
runApp()
runApp()
runApp()
req(input$assignmentCheckbox)
req(!is.null(course_gradebook()))
roster.course <- loaded_course_df()
gb.comb.parse <- course_gradebook()
gb.comb.parse <- gb.comb.parse %>% rename(points = score)
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
N_admin = length(admin_cols)
summary_assign_groups_current <- gb.comb.parse %>%
filter(!is.na(points)) %>%  # Remove rows where 'points' is NA
group_by(user_id, assignment_group_name) %>%
summarise(
points = sum(points, na.rm = TRUE),
points_possible = sum(points_possible, na.rm = TRUE)
) %>%
mutate(percent = points / points_possible)
#pivot wider to get the assignment group name as columns
gb_sum <- summary_assign_groups_current %>%
pivot_wider(names_from = assignment_group_name,
values_from = c(points,points_possible,percent),
names_glue = "{assignment_group_name}_{.value}",
names_sort = TRUE,  # Ensures consistent sorting of names
names_vary = "slowest"  # Ensures columns with the same group name are adjacent
)
# this is a better summary for the oml, I'll put this on one sheet.
gb_sum <- roster.course %>% select(user_id,
user.sortable_name,
Email,
sis_user_id,
course_id,
instructor,section,
section_hour,
Score,Grade,
Points,`Max Points`) %>%
left_join(gb_sum, by = "user_id")
#summarise points, points_possible, and score for each user by assignment_group_name
#This shows what they should have in each assignment group (i.e. max points possible)
#this will be the same
gb_full <- gb.comb.parse %>%
group_by(user_id, assignment_name) %>%  # Group by key variables
reframe(
points = first(na.omit(points)),  # Take the first non-NA value
points_possible = first(na.omit(points_possible)),  # Same for points_possible
percent = first(na.omit(percent))  # Same for percent
)  %>%
pivot_wider(
names_from = assignment_name,
values_from = c(points, points_possible, percent),
names_glue = "{assignment_name}_{.value}",
names_sort = TRUE,
names_vary = "slowest"
)
gb_full <- roster.course %>% select(user_id,user.sortable_name,instructor,section_hour) %>%
left_join(gb_full, by = "user_id")
gb_sum <- gb_sum %>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=2),
Points = round(Points,digits=2))
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb_sum <- rename(gb_sum,
ID = user_id,
CID=sis_user_id,
Name = user.sortable_name,
`Course ID` = course_id,
Instructor = instructor,
Section = section,
Hour=section_hour
)
gb_full <- rename(gb_full,
ID = user_id,
Name = user.sortable_name,
Instructor = instructor,
Hour=section_hour
)
instructor_sum <- gb_sum %>% group_by(Instructor) %>%
summarise(mean_score = mean(Score,na.rm=TRUE),
mean_points = mean(Points,na.rm=TRUE),
mean_max_points = mean(`Max Points`,na.rm=TRUE),
mean_Score = mean(Score,na.rm=TRUE),
n = n())
instructor_courses <- roster.course %>% group_by(course_id) %>%
summarise(count = n(),instructor = first(instructor))
gb.comb.parse <- course_gradebook()
gb.comb.parse <- gb.comb.parse %>% rename(points = score)
req(input$assignmentCheckbox)
req(!is.null(course_gradebook()))
roster.course <- loaded_course_df()
runApp()
roster.course <- loaded_course_df()
gb.comb.parse <- course_gradebook() %>% rename(points = score)
roster.course <- loaded_course_df()
gb.comb.parse <- course_gradebook() %>% rename(points = score)
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
N_admin = length(admin_cols)
#browser()
summary_assign_groups_current <- gb.comb.parse %>%
filter(!is.na(points)) %>%  # Remove rows where 'points' is NA
group_by(user_id, assignment_group_name) %>%
summarise(
points = sum(points, na.rm = TRUE),
points_possible = sum(points_possible, na.rm = TRUE)
) %>%
mutate(percent = points / points_possible)
#pivot wider to get the assignment group name as columns
gb_sum <- summary_assign_groups_current %>%
pivot_wider(names_from = assignment_group_name,
values_from = c(points,points_possible,percent),
names_glue = "{assignment_group_name}_{.value}",
names_sort = TRUE,  # Ensures consistent sorting of names
names_vary = "slowest"  # Ensures columns with the same group name are adjacent
)
# this is a better summary for the oml, I'll put this on one sheet.
gb_sum <- roster.course %>% select(user_id,
user.sortable_name,
Email,
sis_user_id,
course_id,
instructor,section,
section_hour,
Score,Grade,
Points,`Max Points`) %>%
left_join(gb_sum, by = "user_id")
#summarise points, points_possible, and score for each user by assignment_group_name
#This shows what they should have in each assignment group (i.e. max points possible)
#this will be the same
gb_full <- gb.comb.parse %>%
group_by(user_id, assignment_name) %>%  # Group by key variables
reframe(
points = first(na.omit(points)),  # Take the first non-NA value
points_possible = first(na.omit(points_possible)),  # Same for points_possible
percent = first(na.omit(percent))  # Same for percent
)  %>%
pivot_wider(
names_from = assignment_name,
values_from = c(points, points_possible, percent),
names_glue = "{assignment_name}_{.value}",
names_sort = TRUE,
names_vary = "slowest"
)
gb_full <- roster.course %>% select(user_id,user.sortable_name,instructor,section_hour) %>%
left_join(gb_full, by = "user_id")
gb_sum <- gb_sum %>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=2),
Points = round(Points,digits=2))
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb_sum <- rename(gb_sum,
ID = user_id,
CID=sis_user_id,
Name = user.sortable_name,
`Course ID` = course_id,
Instructor = instructor,
Section = section,
Hour=section_hour
)
gb_full <- rename(gb_full,
ID = user_id,
Name = user.sortable_name,
Instructor = instructor,
Hour=section_hour
)
instructor_sum <- gb_sum %>% group_by(Instructor) %>%
summarise(mean_score = mean(Score,na.rm=TRUE),
mean_points = mean(Points,na.rm=TRUE),
mean_max_points = mean(`Max Points`,na.rm=TRUE),
mean_Score = mean(Score,na.rm=TRUE),
n = n())
instructor_courses <- roster.course %>% group_by(course_id) %>%
summarise(count = n(),instructor = first(instructor))
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
N_admin = length(admin_cols)
summary_assign_groups_current <- gb.comb.parse %>%
filter(!is.na(points)) %>%  # Remove rows where 'points' is NA
group_by(user_id, assignment_group_name) %>%
summarise(
points = sum(points, na.rm = TRUE),
points_possible = sum(points_possible, na.rm = TRUE)
) %>%
mutate(percent = points / points_possible)
gb_sum <- summary_assign_groups_current %>%
pivot_wider(names_from = assignment_group_name,
values_from = c(points,points_possible,percent),
names_glue = "{assignment_group_name}_{.value}",
names_sort = TRUE,  # Ensures consistent sorting of names
names_vary = "slowest"  # Ensures columns with the same group name are adjacent
)
# this is a better summary for the oml, I'll put this on one sheet.
gb_sum <- roster.course %>% select(user_id,
user.sortable_name,
Email,
sis_user_id,
course_id,
instructor,section,
section_hour,
Score,Grade,
Points,`Max Points`) %>%
left_join(gb_sum, by = "user_id")
gb_full <- gb.comb.parse %>%
group_by(user_id, assignment_name) %>%  # Group by key variables
reframe(
points = first(na.omit(points)),  # Take the first non-NA value
points_possible = first(na.omit(points_possible)),  # Same for points_possible
percent = first(na.omit(percent))  # Same for percent
)  %>%
pivot_wider(
names_from = assignment_name,
values_from = c(points, points_possible, percent),
names_glue = "{assignment_name}_{.value}",
names_sort = TRUE,
names_vary = "slowest"
)
gb_full <- roster.course %>% select(user_id,user.sortable_name,instructor,section_hour) %>%
left_join(gb_full, by = "user_id")
gb_sum <- gb_sum %>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=2),
Points = round(Points,digits=2))
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb_sum <- rename(gb_sum,
ID = user_id,
CID=sis_user_id,
Name = user.sortable_name,
`Course ID` = course_id,
Instructor = instructor,
Section = section,
Hour=section_hour
)
gb_full <- rename(gb_full,
ID = user_id,
Name = user.sortable_name,
Instructor = instructor,
Hour=section_hour
)
instructor_sum <- gb_sum %>% group_by(Instructor) %>%
summarise(mean_score = mean(Score,na.rm=TRUE),
mean_points = mean(Points,na.rm=TRUE),
mean_max_points = mean(`Max Points`,na.rm=TRUE),
mean_Score = mean(Score,na.rm=TRUE),
n = n())
instructor_courses <- roster.course %>% group_by(course_id) %>%
summarise(count = n(),instructor = first(instructor))
roster.course <- loaded_course_df()
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
N_admin = length(admin_cols)
#browser()
summary_assign_groups_current <- gb.comb.parse %>%
filter(!is.na(points)) %>%  # Remove rows where 'points' is NA
group_by(user_id, assignment_group_name) %>%
summarise(
points = sum(points, na.rm = TRUE),
points_possible = sum(points_possible, na.rm = TRUE)
) %>%
mutate(percent = points / points_possible)
#pivot wider to get the assignment group name as columns
gb_sum <- summary_assign_groups_current %>%
pivot_wider(names_from = assignment_group_name,
values_from = c(points,points_possible,percent),
names_glue = "{assignment_group_name}_{.value}",
names_sort = TRUE,  # Ensures consistent sorting of names
names_vary = "slowest"  # Ensures columns with the same group name are adjacent
)
# this is a better summary for the oml, I'll put this on one sheet.
gb_sum <- roster.course %>% select(user_id,
user.sortable_name,
Email,
sis_user_id,
course_id,
instructor,section,
section_hour,
Score,Grade,
Points,`Max Points`) %>%
left_join(gb_sum, by = "user_id")
#summarise points, points_possible, and score for each user by assignment_group_name
#This shows what they should have in each assignment group (i.e. max points possible)
#this will be the same
gb_full <- gb.comb.parse %>%
group_by(user_id, assignment_name) %>%  # Group by key variables
reframe(
points = first(na.omit(points)),  # Take the first non-NA value
points_possible = first(na.omit(points_possible)),  # Same for points_possible
percent = first(na.omit(percent))  # Same for percent
)  %>%
pivot_wider(
names_from = assignment_name,
values_from = c(points, points_possible, percent),
names_glue = "{assignment_name}_{.value}",
names_sort = TRUE,
names_vary = "slowest"
)
gb_full <- roster.course %>% select(user_id,user.sortable_name,instructor,section_hour) %>%
left_join(gb_full, by = "user_id")
gb_sum <- gb_sum %>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=2),
Points = round(Points,digits=2))
gb_sum <- summary_assign_groups_current %>%
pivot_wider(names_from = assignment_group_name,
values_from = c(points,points_possible,percent),
names_glue = "{assignment_group_name}_{.value}",
names_sort = TRUE,  # Ensures consistent sorting of names
names_vary = "slowest"  # Ensures columns with the same group name are adjacent
)
# this is a better summary for the oml, I'll put this on one sheet.
gb_sum <- roster.course %>% select(user_id,
user.sortable_name,
Email,
sis_user_id,
course_id,
instructor,section,
section_hour,
Score,Grade,
Points,`Max Points`) %>%
left_join(gb_sum, by = "user_id")
gb_full <- gb.comb.parse %>%
group_by(user_id, assignment_name) %>%  # Group by key variables
reframe(
points = first(na.omit(points)),  # Take the first non-NA value
points_possible = first(na.omit(points_possible)),  # Same for points_possible
percent = first(na.omit(percent))  # Same for percent
)  %>%
pivot_wider(
names_from = assignment_name,
values_from = c(points, points_possible, percent),
names_glue = "{assignment_name}_{.value}",
names_sort = TRUE,
names_vary = "slowest"
)
gb_full <- roster.course %>% select(user_id,user.sortable_name,instructor,section_hour) %>%
left_join(gb_full, by = "user_id")
gb_sum <- gb_sum %>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=2),
Points = round(Points,digits=2))
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb_sum <- rename(gb_sum,
ID = user_id,
CID=sis_user_id,
Name = user.sortable_name,
`Course ID` = course_id,
Instructor = instructor,
Section = section,
Hour=section_hour
)
gb_full <- rename(gb_full,
ID = user_id,
Name = user.sortable_name,
Instructor = instructor,
Hour=section_hour
)
instructor_sum <- gb_sum %>% group_by(Instructor) %>%
summarise(mean_score = mean(Score,na.rm=TRUE),
mean_points = mean(Points,na.rm=TRUE),
mean_max_points = mean(`Max Points`,na.rm=TRUE),
mean_Score = mean(Score,na.rm=TRUE),
n = n())
instructor_courses <- roster.course %>% group_by(course_id) %>%
summarise(count = n(),instructor = first(instructor))
runApp()
runApp()
runApp()
runApp()
