#roster.course <-roster.course %>% mutate(section = substr(section, nchar(section)-7, nchar(section)))
#roster.course <-roster.course %>% mutate(section = substr(section, 1, nchar(section)-1))
roster.course <-roster.course %>% mutate(course_name = str_c(instructor,section,sep = "-"))
#roster.course <-roster.course %>% mutate(section = substr(section, nchar(section)-7, nchar(section)))
#roster.course <-roster.course %>% mutate(section = substr(section, 1, nchar(section)-1))
roster.course <-roster.course %>% mutate(course_name = str_c(instructor,tableUI_section,sep = "-"))
course.instructor.df <- as.data.frame(roster.course %>% group_by(course_id) %>%
select(instructor,tableUI_section,course_name) %>% distinct())
gb.comb.parse <- gb.comb.parse %>% left_join(course.instructor.df, by = "course_id")
View(gb.comb.parse)
course.instructor.df <- as.data.frame(roster.course %>% group_by(course_id) %>%
select(instructor,tableUI_section,course_name) %>% distinct())
gb.comb.parse <- gb.comb %>%
left_join(assign.df, by = "assignment_id")%>%
select(user_id,course_id,name,score,points_possible,assignment_group_id)%>%
mutate(percent = score/points_possible)
setProgress(value = 0.5, message = "Joining Data...")
#rename name to assignment_name
gb.comb.parse <-  gb.comb.parse %>% rename(assignment_name = name)
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
gb.comb.parse <- gb.comb.parse %>% left_join(assign.group.comb()%>%
select(assignment_group_id,assignment_group_name), by = "assignment_group_id")
runApp()
runApp()
gb.comb.parse <- gb.comb %>%
left_join(assign.df, by = "assignment_id")%>%
select(user_id,course_id,name,score,points_possible,assignment_group_id)%>%
mutate(percent = score/points_possible)
#edit from GPT
gb.comb <- assign.df %>%
group_by(course_id) %>%
group_split() %>%
purrr::map_dfr(~{
incProgress(1/length(unique(assign.df$course_id)))
get_bulk_assignments(.x, unique(.x$course_id))
})
gb.comb <- gb.comb %>% filter(user_id %in% roster.course$id)
#edit from GPT
gb.canvas <- assign.df %>%
group_by(course_id) %>%
group_split() %>%
purrr::map_dfr(~{
incProgress(1/length(unique(assign.df$course_id)))
get_bulk_assignments(.x, unique(.x$course_id))
})
runApp()
runApp()
assignment_query <- iter_args_list(course.list$id, "assignment_ids[]")
args <- c(args, assignment_query)
response <- GET(url,
add_headers(Authorization = paste("Bearer", check_token())),
query  = args,
encode = 'form')
d <- paginate(response) %>%
purrr::map(httr::content, "text") %>%
purrr::map(jsonlite::fromJSON, flatten = TRUE)
# flatten to data.frame if able, otherwise return as is
#d <- tryCatch(purrr::map_df(d, purrr::flatten_df),
#              error = function(e) d)
dplyr::bind_rows(d)
# flatten to data.frame if able, otherwise return as is
#d <- tryCatch(purrr::map_df(d, purrr::flatten_df),
#              error = function(e) d)
d <- dplyr::bind_rows(d)
d <- paginate(response) %>%
purrr::map(httr::content, "text") %>%
purrr::map(jsonlite::fromJSON, flatten = TRUE)
# flatten to data.frame if able, otherwise return as is
#d <- tryCatch(purrr::map_df(d, purrr::flatten_df),
#              error = function(e) d)
d <- dplyr::bind_rows(d)
return(d)
runApp()
runApp()
runApp()
gb.comb.parse <- gb.comb %>%
left_join(assign.df, by = "assignment_id")%>%
select(user_id,course_id,name,score,points_possible,assignment_group_id)%>%
mutate(percent = score/points_possible)
#rename name to assignment_name
gb.comb.parse <-  gb.comb.parse %>% rename(assignment_name = name)
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
assign.comb <- assign.group.comb()
gb.comb.parse <- gb.comb %>%
left_join(assign.df, by = "assignment_id")%>%
select(user_id,course_id,name,score,points_possible,assignment_group_id)%>%
mutate(percent = score/points_possible)
#rename name to assignment_name
gb.comb.parse <-  gb.comb.parse %>% rename(assignment_name = name)
gb.comb.parse <- gb.comb.parse %>% left_join(assign.group.comb()%>%
select(assignment_group_id,assignment_group_name), by = "assignment_group_id")
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
assign.comb <- assign.group.comb()
gb.comb.parse <- gb.comb.parse %>% left_join(assign.group.comb()%>%
select(assignment_group_id,assignment_group_name), by = "assignment_group_id")
gb.comb.parse <- gb.comb.parse %>% left_join(assign.comb%>%
select(assignment_group_id,assignment_group_name), by = "assignment_group_id")
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
assign.comb <- assign.group.comb()%>%
select(assignment_group_id,assignment_group_name
gb.comb.parse <- gb.comb.parse %>% left_join(assign.comb), by = "assignment_group_id")
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
assign.comb <- assign.group.comb()%>%
select(assignment_group_id,assignment_group_name
gb.comb.parse <- gb.comb.parse %>% left_join(assign.comb), by = "assignment_group_id")
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
assign.comb <- assign.group.comb()%>%select(assignment_group_id,assignment_group_name)
gb.comb.parse <- gb.comb.parse %>% left_join(assign.comb), by = "assignment_group_id")
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
assign.comb <- assign.group.comb()%>%
select(assignment_group_id,assignment_group_name)
runApp()
View(assign.comb)
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
assign.comb <- assign.group.comb()
assign.comb <- assign.comb %>% select(assignment_group_id,assignment_group_name)
gb.comb.parse <- gb.comb %>%
left_join(assign.df, by = "assignment_id")%>%
select(user_id,course_id,name,score,points_possible,assignment_group_id)%>%
mutate(percent = score/points_possible)
#rename name to assignment_name
gb.comb.parse <-  gb.comb.parse %>% rename(assignment_name = name)
#reactive value that may be useful in the plotting function
# find the name in assign.group.comb and add it to the gb.comb.parse by assign_group_id
assign.comb <- assign.group.comb()
assign.comb <- assign.comb %>% select(assignment_group_id,assignment_group_name)
gb.comb.parse <- gb.comb.parse %>% left_join(assign.comb, by = "assignment_group_id")
#roster.course <-roster.course %>% mutate(section = substr(section, nchar(section)-7, nchar(section)))
#roster.course <-roster.course %>% mutate(section = substr(section, 1, nchar(section)-1))
roster.course <-roster.course %>% mutate(course_name = str_c(instructor,tableUI_section,sep = "-"))
course.instructor.df <- as.data.frame(roster.course %>% group_by(course_id) %>%
select(instructor,tableUI_section,course_name) %>% distinct())
#something happened here
gb.comb.parse <- gb.comb.parse %>% left_join(course.instructor.df, by = "course_id")
#I could add the instructor name to this, or leave anonymized
course_gradebook(gb.comb.parse)
Q
runApp()
runApp()
runApp()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.comb.parse <- course_gradebook()
runApp()
runApp()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}")
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=FALSE)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{.value}_{assignment_name}",names_sort=TRUE)
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{.value} {assignment_name}",names_sort=TRUE)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{.value} {assignment_name}",names_sort=TRUE)
View(gb.comb.parse)
gb.comb.parse <- course_gradebook()
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(score,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
View(gb.comb.parse)
df <- gb.comb.parse %>% select(order(names(.)))
df <- gb.comb.parse %>% select(1:5,order(names(.)[6:ncol(.)])+5)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
df <- gb.comb.parse %>% select(1:5,order(names(.)[6:ncol(.)])+5)
#
gb.comb.parse <- gb.comb.parse %>% select(1:5,order(names(.)[6:ncol(.)])+5)
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section, section_hour)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
user_id,course_id,instructor,
section, section_hour)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:5,order(names(.)[6:ncol(.)])+5)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,admin_cols
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:len(admin_cols),order(names(.)[len(admin_cols)+1:ncol(.)])+len(admin_cols))
ncol.admin <- length(admin_cols)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
ncol.admin <- length(admin_cols)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:ncol.admin,order(names(.)[ncol.admin+1:ncol(.)])+ncol.admin)
ncol.admin <- numeric(length(admin_cols))
ncol.admin <- num(length(admin_cols))
ncol.admin <- num(length(admin_cols))[[1]]
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:length(admin_cols),order(names(.)[length(admin_cols)+1:ncol(.)])+length(admin_cols))
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:5,order(names(.)[6:ncol(.)])+5)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:length(admin_cols),order(names(.)[6:ncol(.)])+5)
N_admin = length(admin_cols)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[6:ncol(.)])+5)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[6:ncol(.)])+5)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[6:ncol(.)])+N_admin)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[(N_admin+1):ncol(.)])+N_admin)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
N_admin = length(admin_cols)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[(N_admin+1):ncol(.)])+N_admin)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[(N_admin+1):ncol(.)])+N_admin)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:5,order(names(.)[(5+1):ncol(.)])+5)
View(gb.comb.parse)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[(N_admin+1):ncol(.)])+N_admin)
gb.xl <- roster.course %>% select(user_id,user.sortable_name,user.login_id,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=1),
Points = round(Points,digits=1))
gb.xl <- roster.course %>% select(user_id,user.sortable_name,email,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=1),
Points = round(Points,digits=1))
runApp()
roster.course <- roster.course %>% mutate(
`Max Points`=grades.unposted_current_points/grades.unposted_current_score*100)
names(roster.course)[6:8] <- c("Score","Grade","Points")
runApp()
gb.comb.parse <- course_gradebook() %>% rename(points = score)
runApp()
#Pivot wider to get assignment id as columns names
admin_cols <- c("user_id","course_id","instructor",
"section", "section_hour")
N_admin = length(admin_cols)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
# 5 is hard coded to be the number of columns that are not assignment related
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[(N_admin+1):ncol(.)])+N_admin)
gb.xl <- roster.course %>% select(user_id,user.sortable_name,email,
Score,Grade,Points,`Max Points`)  %>%
left_join(gb.comb.parse, by = "user_id")%>%
mutate(Score = Score/100,`Max Points` = round(`Max Points`,digits=1),
Points = round(Points,digits=1))
# df_renamed <- rename(df, NewName1 = OldName1, NewName2 = OldName2)
gb.xl <- rename(gb.xl, ID = user_id, Name = user.sortable_name, `Course ID` = course_id,
Instructor = instructor, Section = section,Hour=section_hour,
Email = email, Score = Score, Grade = Grade, Points = Points,
`Max Points` = `Max Points`)
gb.xl <- gb.xl %>% select(ID,Name,Email,`Course ID`,Instructor,Section,Hour,
Grade,Score,Points,`Max Points`,everything())
#download gb.xl as an xlsx file
write.xlsx(gb.xl, file)
runApp()
runApp()
View(gb.comb.parse)
#summarise points, points_possible, and score for each user by assignment_group_name
summary_assign_groups <- gb.comb.parse %>% group_by(user_id,assignment_group_name) %>%
summarise(points = sum(points),points_possible = sum(points_possible),
score = sum(score)) %>%
mutate(percent = score/points_possible)
#summarise points, points_possible, and score for each user by assignment_group_name
summary_assign_groups <- gb.comb.parse %>% group_by(user_id,assignment_group_name) %>%
summarise(points = sum(points),points_possible = sum(points_possible)) %>%
mutate(percent = score/points_possible)
#summarise points, points_possible, and score for each user by assignment_group_name
summary_assign_groups <- gb.comb.parse %>% group_by(user_id,assignment_group_name) %>%
summarise(points = sum(points),points_possible = sum(points_possible)) %>%
mutate(percent = points/points_possible)
View(summary_assign_groups)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
#get the assignment group summaries and add to gb.comb.parse, match by user_id
gb.comb.parse2 <- gb.comb.parse %>% left_join(summary_assign_groups, by = "user_id")
View(gb.comb.parse2)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,all_of(admin_cols)
)%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
#get the assignment group summaries and add to gb.comb.parse, match by user_id
#pivot asummary assign groups to wide format
summary_assign_wide <- summary_assign_groups %>% pivot_wider(names_from = assignment_group_name,
values_from = c(points,points_possible,percent),
names_glue = "{assignment_group_name}_{.value}",names_sort=TRUE)
View(summary_assign_wide)
gb.comb.parse2 <- gb.comb.parse %>% left_join(summary_assign_wide, by = "user_id")
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[(N_admin+1):ncol(.)])+N_admin)
#get the assignment group summaries and add to gb.comb.parse, match by user_id
#pivot asummary assign groups to wide format
summary_assign_wide <- summary_assign_groups %>% pivot_wider(names_from = assignment_group_name,
values_from = c(points,points_possible,percent),
names_glue = "{assignment_group_name}_{.value}",names_sort=TRUE)
gb.comb.parse2 <- gb.comb.parse %>% left_join(summary_assign_wide, by = "user_id")
View(summary_assign_wide)
summary_assign_wide <- summary_assign_wide %>% select(1:1,order(names(.)[2:ncol(.)])+1)))
summary_assign_wide <- summary_assign_wide %>% select(1:1,order(names(.)[2:ncol(.)])+1)
gb.comb.parse <- course_gradebook() %>% rename(points = score)
#summarise points, points_possible, and score for each user by assignment_group_name
summary_assign_groups <- gb.comb.parse %>% group_by(user_id,assignment_group_name) %>%
summarise(points = sum(points),points_possible = sum(points_possible)) %>%
mutate(percent = points/points_possible)
gb.comb.parse <- gb.comb.parse %>% select(-course_name,-assignment_group_id,-assignment_group_name,
all_of(admin_cols))%>%
pivot_wider(names_from = assignment_name,values_from = c(points,points_possible,percent),
names_glue = "{assignment_name}_{.value}",names_sort=TRUE)
gb.comb.parse <- gb.comb.parse %>% select(1:N_admin,order(names(.)[(N_admin+1):ncol(.)])+N_admin)
#get the assignment group summaries and add to gb.comb.parse, match by user_id
#pivot asummary assign groups to wide format
summary_assign_wide <- summary_assign_groups %>% pivot_wider(names_from = assignment_group_name,
values_from = c(points,points_possible,percent),
names_glue = "{assignment_group_name}_{.value}",names_sort=TRUE)
summary_assign_wide <- summary_assign_wide %>% select(1:1,order(names(.)[2:ncol(.)])+1)
gb.comb.parse <- gb.comb.parse %>% left_join(summary_assign_wide, by = "user_id")
gb.comb.parse <- gb.comb.parse %>% left_join(summary_assign_wide%>% select(1:1,order(names(.)[2:ncol(.)])+1), by = "user_id")
summary_assign_wide <- summary_assign_wide %>% select(1:1,order(names(.)[2:ncol(.)])+1)
runApp()
runApp()
#roster.course is roster_course_df()
#assign.df is assignment_list_df()
#first I need the list of user IDs, instructors, user.sortable_name,Points,Max points,and the last 8 characters of name
template.df <- roster.course %>% select(user_id, instructor, user.sortable_name, Points, `Max Points`, course_id, section) %>%
mutate(section = substr(section, nchar(section)-7, nchar(section)))
runApp()
#roster.course is roster_course_df()
#assign.df is assignment_list_df()
#first I need the list of user IDs, instructors, user.sortable_name,Points,Max points,and the last 8 characters of name
template.df <- roster.course %>% select(user_id, instructor, user.sortable_name, Points, `Max Points`, course_id, section) %>%
mutate(section = substr(section, nchar(section)-7, nchar(section)))
#roster.course is roster_course_df()
#assign.df is assignment_list_df()
#first I need the list of user IDs, instructors, user.sortable_name,Points,Max points,and the last 8 characters of name
template.df <- roster.course %>% select(user_id, instructor, user.sortable_name, Points, `Max Points`, course_id, section,section_hour)
runApp()
runApp()
