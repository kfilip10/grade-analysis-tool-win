img(src = "PANE.png", height = "35px", width = "30px", style = "margin-right: 10px;"),
"Grade Report Generator"
),
#Makes the home page. createHomePage() is in the handlers folder
tabPanel("Home",icon = icon("home"),  createHomePage() #icons from: https://www.w3schools.com/bootstrap/bootstrap_ref_comp_glyphs.asp
),
#Prep and Canvas Data
tabPanel("Canvas Access",
value = "prep_panel",
icon = icon("cloud",lib="glyphicon"),
tabsetPanel(
tabPanel("Load Canvas Data", uiOutput("dynamicUI")),#this calls     createCanvasPrepPage() dynamically
tabPanel("Graph Viewer", course_graph_viewer()),
tabPanel("Table Viewer", course_table_viewer())
)
),
#Makes the pre-WPR data prep page. createPreWPRPage() is in the handlers folder
tabPanel("Pre-WPR Prep",icon = icon("list-alt",lib="glyphicon"),createPreWPRPage()
),
#Makes the WPR Analysis and Brief page. This page within the navbar has multiple tabs (tabsetPanel handles those)
tabPanel("WPR Analysis and Brief", icon = icon("stats",lib="glyphicon"), # Using a Shiny icon for comparison
tabsetPanel(
tabPanel("Upload Data", createBriefUploadPage()
),
tabPanel("Create Brief",createBriefPage()
),
#this is for making the distribution plots, as this becomes more robust it will become a standalone function/module
tabPanel("Version Grade DistributionPlots",
div(
h2(HTML("<b>Plot Parameters</b>"), style="text-align:left"),
uiOutput("dynamic_inputs")
),
verbatimTextOutput("summary"),
plotOutput("barplot")
),
#This is a tabular view of the version summary data
tabPanel("Version Summary",
tableOutput("versionTable"),
verbatimTextOutput("Excel Viewer")
)
),
),
#Post Brief OML is not integrated yet
#tabPanel("Post Brief OML",icon=icon("list"),createOMLPage()),
#Brief without Canvas is buggy as of 6JAN. Need to make it more robust
tabPanel("Brief without Canvas",icon=icon("warning-sign",lib="glyphicon"),createManualPage()),
#Settings page which will write to a folder defined in global.R
tabPanel("Settings",icon=icon("cog"),createSettingsPage()
),
#FAQ page which is sparse as of 6JAN
tabPanel("FAQ",icon=icon("question"),createFAQPage(),
)
),
# Custom CSS to change font size of the bin_width but that is removed for now.
# tags$head(
#   tags$style(HTML("
#     /* Custom CSS to resize numeric input */
#     #bin_width[type='number'] {
#       width: 50px; /* Change the width to your desired value */
#     }
#   "))
# ),
)
# Server
server <- function(input, output, session) {
output$dynamicUI <- renderUI({
if (input$navbarID == "prep_panel") {
createCanvasPrepPage()
}
})
# Check if the Canvas API token exists
canvas_api_token <- reactiveVal()
observeEvent(input$navbarID, {
if (input$navbarID == "prep_panel") {
# Code to update canvas_api_token
if (file.exists(canvas_api_token_path)) {
canvas_api_token(readRDS(canvas_api_token_path))
} else {
canvas_api_token(NULL)
}
}
})
canvasPrep_Handler(input, output, session, canvas_api_token)
# Pre WPR Prep logic and display
preWPR_Handler(input, output, session)
# Settings logic and display
settings_Handler(input, output, session)
# Brief logic and display
brief_Handler(input, output, session)
#Manual brief logic and display
brief_Manual_Handler(input, output, session)
#### Task Kill ####
session$onSessionEnded(function() {
stopApp()
# you can put your code here to close the connection
})
}
shinyApp(ui = ui, server = server)
runApp()
# app.R
# Purpose: This is the main file for the Grade Report Generator. It is the file that is run to start the application.
# Started with a simple template from https://shiny.posit.co/r/gallery/start-simple/faithful/
# Modularized over time to make it easier to maintain and add new features piece by piece
# Structure:
# - ui calls functions in the handlers folder to create the UI
# - server calls corresponding functions in the handlers folder which passes the session to communicate back and forth
# - Each handler script includes its UI and server functions
# - shinyApp(ui = ui, server = server) launches the app
# Some Resources for shiny:
# - https://mastering-shiny.org/index.html
# - https://shiny.rstudio.com/tutorial/
#### Function to load packages ####
req <- scan(file.path(getwd(), "req.txt"), character(), quiet = T)#This was how it was in standalone
#invisible so no return/console output
#lapply - apply function to list (it applies the library function to the list of packages in req, which is the req.txt file)
# character.only = T - only use the character strings in the list, not the other stuff
invisible(lapply(req, library, character.only = T))
#### Custom CSS example, .sidebar isn't used but container for use later####
customCSS <- function() {
tags$head(
tags$style(
HTML(
"
/* Custom CSS to change font size of sidebar */
.sidebar {
font-size: 18px; /* Change font size as needed */
}
"
)
)
)
}
#### Load Global Variables and some setup ####
source('global.R') #loads 'global.R' file into environment, there may be a better way to do this but this works for now
sourceAllFilesInFolder(file.path(getwd(),"handlers")) #loads the files in the handlers folder
sourceAllFilesInFolder(file.path(getwd(),"functions")) #loads the files in the functions folder
sourceAllFilesInFolder(file.path(getwd(),"functions","canvas api")) #loads the files in the functions folder
#Changes max file upload size to 30 MB
options(shiny.maxRequestSize = 30*1024^2)
options(spinner.type = 6, spinner.color = "#cfbb34")
#Runs the function to check if the grade csv exists and also makes the settings folder
####Load UI####
ui <- fluidPage(
theme = bs_theme(version = 4, bootswatch = "flatly"),
useShinyjs(), #shiny JS used for hiding/showing elements and enables html formatting https://deanattali.com/shinyjs/overview#demo
#navbarPage - creates a navbar at the top of the page
navbarPage(
id = "navbarID",
#title and logo. Logo won't load when launching from R Studio, works in deployed app
title=div(
img(src = "PANE.png", height = "35px", width = "30px", style = "margin-right: 10px;"),
"Grade Report Generator"
),
#Makes the home page. createHomePage() is in the handlers folder
tabPanel("Home",icon = icon("home"),  createHomePage() #icons from: https://www.w3schools.com/bootstrap/bootstrap_ref_comp_glyphs.asp
),
#Prep and Canvas Data
tabPanel("Canvas Access",
value = "prep_panel",
icon = icon("cloud",lib="glyphicon"),
tabsetPanel(
tabPanel("Load Canvas Data", uiOutput("dynamicUI")),#this calls     createCanvasPrepPage() dynamically
tabPanel("Graph Viewer", course_graph_viewer()),
tabPanel("Table Viewer", course_table_viewer())
)
),
#Makes the pre-WPR data prep page. createPreWPRPage() is in the handlers folder
tabPanel("Pre-WPR Prep",icon = icon("list-alt",lib="glyphicon"),createPreWPRPage()
),
#Makes the WPR Analysis and Brief page. This page within the navbar has multiple tabs (tabsetPanel handles those)
tabPanel("WPR Analysis and Brief", icon = icon("stats",lib="glyphicon"), # Using a Shiny icon for comparison
tabsetPanel(
tabPanel("Upload Data", createBriefUploadPage()
),
tabPanel("Create Brief",createBriefPage()
),
#this is for making the distribution plots, as this becomes more robust it will become a standalone function/module
tabPanel("Version Grade DistributionPlots",
div(
h2(HTML("<b>Plot Parameters</b>"), style="text-align:left"),
uiOutput("dynamic_inputs")
),
verbatimTextOutput("summary"),
plotOutput("barplot")
),
#This is a tabular view of the version summary data
tabPanel("Version Summary",
tableOutput("versionTable"),
verbatimTextOutput("Excel Viewer")
)
),
),
#Post Brief OML is not integrated yet
#tabPanel("Post Brief OML",icon=icon("list"),createOMLPage()),
#Brief without Canvas is buggy as of 6JAN. Need to make it more robust
tabPanel("Brief without Canvas",icon=icon("warning-sign",lib="glyphicon"),createManualPage()),
#Settings page which will write to a folder defined in global.R
tabPanel("Settings",icon=icon("cog"),createSettingsPage()
),
#FAQ page which is sparse as of 6JAN
tabPanel("FAQ",icon=icon("question"),createFAQPage(),
)
),
# Custom CSS to change font size of the bin_width but that is removed for now.
# tags$head(
#   tags$style(HTML("
#     /* Custom CSS to resize numeric input */
#     #bin_width[type='number'] {
#       width: 50px; /* Change the width to your desired value */
#     }
#   "))
# ),
)
# Server
server <- function(input, output, session) {
output$dynamicUI <- renderUI({
if (input$navbarID == "prep_panel") {
createCanvasPrepPage()
}
})
# Check if the Canvas API token exists
canvas_api_token <- reactiveVal()
observeEvent(input$navbarID, {
if (input$navbarID == "prep_panel") {
# Code to update canvas_api_token
if (file.exists(canvas_api_token_path)) {
canvas_api_token(readRDS(canvas_api_token_path))
} else {
canvas_api_token(NULL)
}
}
})
canvasPrep_Handler(input, output, session, canvas_api_token)
# Pre WPR Prep logic and display
preWPR_Handler(input, output, session)
# Settings logic and display
settings_Handler(input, output, session)
# Brief logic and display
brief_Handler(input, output, session)
#Manual brief logic and display
brief_Manual_Handler(input, output, session)
#### Task Kill ####
session$onSessionEnded(function() {
stopApp()
# you can put your code here to close the connection
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
saveRDS(df,file ="uploaded template graded.rds")
saveRDS(df,file ="env/uploaded template graded.rds")
saveRDS(df,file ="env/uploaded template graded.rds")
# saveRDS(df,file ="env/uploaded template graded.rds")
df <- loadRDS("env/uploaded template graded.rds")
# saveRDS(df,file ="env/uploaded template graded.rds")
df <- load("env/uploaded template graded.rds")
# saveRDS(df,file ="env/uploaded template graded.rds")
df <- readRDS("env/uploaded template graded.rds")
df <- readRDS("env/uploaded template graded.rds")
View(df)
View(df)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(list.df)
View(list.df)
View(list.df[[2]])
View(df.list)
View(df.list[[1]])
View(df.list[[2]])
View(df.list[[3]])
View(df.list[[1]])
View(df.list[[4]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df.roster)
View(df.total)
#retrieve the section from df.roster for each element in did_not_take_any_exam
no.entries <- df.total[df.total$Name %in% did_not_take_any_exam,]
#combines for summary df and question df
# df.total is used for the summary data
# df.q dataframe is used for the question data
# df.q needs an entry for every cadet that took times the number of problems (247x8x2 roughly 3705)
# question, score, concept, cut.page, max (points), v.label ("Version 1"), version (num)
#i=1
df.roster <- gb[[1]][[3]]
View(df.roster)
runApp()
View(df.roster)
runApp()
View(df.data)
df.data[complete.cases(df.data),]
test <- df.data[complete.cases(df.data),]
View(test)
course.roster <- course.roster[complete.cases(df.data),]
#remove all rows that have incomplete data
course.roster <- data.frame(df.data["ID"],
df.data["Section"],
df.data["Name"],
df.data["Course ID"],
df.data["Assignment ID"])
course.roster <- course.roster[complete.cases(course.roster),]
View(course.roster)
runApp()
runApp()
runApp()
#retrieve the section from df.roster for each element in did_not_take_any_exam
no.entries <- df.roster[df.roster$Name %in% did_not_take_any_exam,]
runApp()
runApp()
View(df.total)
View(duplicate.entries)
View(df.head)
dup.entries <- df.roster[df.roster$Name %in% duplicate.entries$Name,]
runApp()
runApp()
View(grades.df)
runApp()
runApp()
#left join df.total and df.roster by ID
df.total <- left_join(df.total%>%select(ID,Course.ID,Assignment.ID),df.roster,by="ID")
#left join df.total and df.roster by ID
df.total <- left_join(df.total,df.roster%>%select(ID,Course.ID,Assignment.ID),by="ID")
#rename mge.points to points
grades.df <- grades.df %>% rename(points = mge.points,
course_id = Course.ID,
assignment_id = Assignment.ID)
#rename mge.points to points
grades.df <- grades.df %>% rename(points = mge.points,
course_id = Course.ID,
assignment_id = Assignment.ID)
#this is the function that will be applied to each course_id group
#resp <- lapply(split(roster.course, roster.course$course_id), bulk_grade_post)
#expects a dataframe from the gradebook with columns: course_id, user_id, id (from assignment table), points
# to get the bulk grades posted I need the following in the df:
#' @param course_id [Integer] id from course roster
#' @param user_id [Integer] id from course roster
#' @param assignment_id [Integer] id from assignment list (labelled 'id')
#' @param points [Integer] number of points to assign, labelled in course roster as 'points'
#' @req dataframe with combined course roster
#' @req dataframe with combined assignment list
grade_assignments_bulk <- function(df){
if(length(unique(df$assignment_id)) > 1) stop("Only one assignment_id allowed")
assignment_id <- unique(df$assignment_id)
course_id <- unique(df$course_id)
grade_data <- setNames(as.list(df$points), paste0('grade_data[', df$id, '][posted_grade]'))
url <- make_canvas_url('courses',course_id, "assignments", assignment_id, "submissions/update_grades")
response <- POST(url,
add_headers(Authorization = paste("Bearer", check_token())),
body = grade_data,
encode = 'form')
#then I need to return the result as success or failure and return the course id and assignment id
#if success then return the course_id and assignment_id
#if failure then return the course_id and assignment_id and the response
if (response$status_code == 200) {return(paste(assignment_id, " succesfully updated for course ",course_id))}
else{return(paste(assignment_id, " failed to update for course ",course_id, " with response ", response$status_code))}
}
resp <- lapply(split(grades.df, grades.df$course_id), grade_assignments_bulk)
#rename mge.points to points
grades.df <- grades.df %>% rename(id=ID,
points = mge.points,
course_id = Course.ID,
assignment_id = Assignment.ID)
#ID, Name,version,Section, Course.ID,Assignment.ID,mge.points
grades.df <- canvas.upload.df$dataframes[[1]]
#rename mge.points to points
grades.df <- grades.df %>% rename(id=ID,
points = mge.points,
course_id = Course.ID,
assignment_id = Assignment.ID)
resp <- lapply(split(grades.df, grades.df$course_id), grade_assignments_bulk)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(api_test)
View(api_test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("pingr")
runApp()
runApp()
runApp()
runApp()
canvas_api_token <- readRDS("E:/Google Drive/12. Git/grade-analysis-tool-win/shiny/canvas_api_token.rds")
api <- readRDS("E:/Google Drive/12. Git/grade-analysis-tool-win/shiny/api.rds")
api[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
check_domain()
api_test()
api_test()
print(get("rcanvas_CANVAS_DOMAIN", envir = cdenv))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
