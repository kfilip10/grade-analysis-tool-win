scale_fill_manual(values = version_palette_q) +
labs(x = xaxis, y = "Count", fill = NULL) +
scale_x_continuous(
name = xaxis,
breaks = seq(0, max(df[[col]], na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
#ADDED 16MAY HISTO PLOT
col <- "score"  # Primary axis in points
xaxis <- "Score (Points)"
max_pts <- max(df$max)  # Make sure this reflects the actual max points
df$legend <- str_c(df$version, " - Q", df$name)
q.score.plot <- ggplot(df, aes(x = .data[[col]], fill = legend)) +
geom_histogram(
binwidth = 1,
position = "identity",
alpha = 0.4,
color = "black"
) +
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = xaxis, y = "Count", fill = NULL) +
scale_x_continuous(
name = xaxis,
breaks = seq(0, max(df[[col]], na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
df$score <- df$percent * max(df$max, na.rm = TRUE) / 100
# Create the histogram with color grouping
q.score.plot <- ggplot(df, aes(x = get(col), color = legend, fill = legend)) +
geom_density(alpha = 0.08, adjust = 0.3,
aes(y = after_stat(density)), size = 1.1) +  # Use density for normalized comparison
theme_classic() +
scale_color_manual(values = version_palette_q) +
scale_fill_manual(values = version_palette_q) +
labs(x = xaxis, y = "Density", fill = NULL, color = NULL) +
scale_x_continuous(
name = xaxis,
breaks = seq(0, max(df[[col]]), 5),
sec.axis = sec_axis(
trans = ~ . * (max_pts / max(df[[col]])),  # Transformation for secondary axis
name = "Points"                            # Label for secondary x-axis
)
) +
scale_y_continuous(
name = "Density"
) +
geom_vline(xintercept = 88, linewidth = 0.8, alpha = 0.4, linetype = "longdash", color = "forestgreen") +
geom_vline(xintercept = 76, linewidth = 0.8, alpha = 0.4, linetype = "longdash", color = "blue") +
geom_vline(xintercept = 60, linewidth = 0.8, alpha = 0.4, linetype = "longdash", color = "red") +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(
color = guide_legend(ncol = 1),  # Arrange legend items in 1 column
fill = guide_legend(ncol = 1)
)
df$score <- df$percent * max(df$max, na.rm = TRUE) / 100
q.score.plot <- ggplot(df, aes(x = .data[[col]], fill = legend)) +
geom_histogram(
binwidth = 1,
position = "identity",
alpha = 0.4,
color = "black"
) +
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = xaxis, y = "Count", fill = NULL) +
scale_x_continuous(
name = xaxis,
breaks = seq(0, max(df[[col]], na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
print(q.score.plot)
q.score.plot <- ggplot(df, aes(x = value, fill = legend)) +
geom_histogram(
binwidth = 1,
position = "dodge",     # ← side-by-side bars
alpha = 0.6,
color = "black"
) +
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Count", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
print(q.score.plot)
#ADDED 16MAY HISTO PLOT
df_hist <- df %>%
group_by(legend, value) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(legend) %>%
mutate(percent = count / sum(count) * 100)
ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(position = "dodge", color = "black", alpha = 0.6) +
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.9),
width = 0.9,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
print(q.score.plot)
ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.9),
width = 0.9,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.9),
width = 0.7,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
print(q.score.plot)
ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.9),
width = 0.7,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.9),
width = 0.6,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.6),
width = 0.6,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
unique(df$value)
length(unique(df$value))
q.score.plot <- ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.6),
width = 0.6,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8)
) +
guides(fill = guide_legend(ncol = 1))
print(q.score.plot)
q.score.plot <- ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.6),
width = 0.6,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
scale_y_continuous(
breaks = seq(0, 100, 10),  # Grid and tick marks every 10%
limits = c(0, 100),        # Optional: cap at 100%
expand = expansion(mult = c(0, 0.05))  # Optional: small padding at top
)+
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8),
panel.grid.major.y = element_line(color = "grey80", size = 0.5),
panel.grid.minor.y = element_blank(),  # Optional: turn off minor lines
panel.grid.major.x = element_blank(),  # Optional: no vertical grid lines
) +
guides(fill = guide_legend(ncol = 1))
q.score.plot <- ggplot(df_hist, aes(x = value, y = percent, fill = legend)) +
geom_col(
position = position_dodge(width = 0.6),
width = 0.6,
color = "black",
alpha = 0.6
)+
theme_classic() +
scale_fill_manual(values = version_palette_q) +
labs(x = "Score (Points)", y = "Percent of Students", fill = NULL) +
scale_x_continuous(
breaks = seq(0, max(df$value, na.rm = TRUE), 1),
sec.axis = sec_axis(
trans = ~ . / max_pts * 100,
name = "Score (%)"
)
) +
scale_y_continuous(
breaks = seq(0, 100, 10),  # Grid and tick marks every 10%
limits = c(0, 100),        # Optional: cap at 100%
expand = expansion(mult = c(0, 0.05))  # Optional: small padding at top
)+
geom_vline(xintercept = c(0.6, 0.76, 0.88) * max_pts,
linewidth = 0.8, alpha = 0.4, linetype = "longdash",
color = c("red", "blue", "forestgreen")) +
theme(
text = element_text(size = 16),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
legend.position = c(0.025, 0.925),
legend.justification = c(0, 1),
legend.background = element_rect(fill = "white", color = "black"),
legend.box.background = element_rect(color = "black", linewidth = 0.8),
panel.grid.major.y = element_line(color = "grey80", linewidth = 0.5),
panel.grid.minor.y = element_blank(),  # Optional: turn off minor lines
panel.grid.major.x = element_blank(),  # Optional: no vertical grid lines
) +
guides(fill = guide_legend(ncol = 1))
print(q.score.plot)
force(df)
shiny::runApp()
shiny::runApp()
force(df)
shiny::runApp()
print(gs_data$ppt, target= "test/ppt.pptx")
shiny::runApp()
question_titles()
names(question_titles())[1]
names(question_titles())
names(question_titles()[1])
a <- question_titles()
View(a)
a <- question_titles()$pool
names(question_titles()$pool[1])
question_titles()
a <- question_titles()
first_questions <- question_titles()$pool[[first_file]]
## ADDED 16MAY ----
# Goal is to make the first batch of question groups based on v1 input
# Since subsequent versions will have similar this just saves button pressing.
# Automatically create groups for the first file's questions
first_file <- names(question_titles()$pool[1])
first_questions <- question_titles()$pool[[first_file]]
version_label <- paste0("v", input$selected_version)
# Initialize new groups list
auto_groups <- list()
grouped_questions <- list()
shiny::runApp()
shiny::runApp()
